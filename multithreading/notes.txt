** MULTITASKING -
- performing multiple task at a time
ex. You use Media player, test editor, and browser at the same time on your machine
and the CPU executes each of this task concurrently
- It increases the performance of the CPU
- it can be achieved using multiprocessing and multithreading

MultiProcessing - process based multitasking
Multithreading - thread based multitasking

** MULTIPROCESSING
- Running multiple processes at the same time
- Single-Core CPU - Only one process can run at a time,
But the CPU switches between processes superfast (called context switching)
So it feels like multiple things are happening at once — but only one runs at a time
So it’s pseudo-multiprocessing — not true multiprocessing.
-  Multi-Core CPU (like modern computers)
- Each core can handle one process at a time
- So a quad-core CPU can truly run 4 processes simultaneously
- That’s real parallel processing
- It is the best suitable at system level (OS level)

** MULTITHREADING
- Process ? a complete, independent program that’s running on your computer.
Each process runs in isolation — they don’t share memory.
Ex. Open a chrome, open a vscode

- Thread ? a tiny worker (a lightweight task) inside a process — it’s the smallest unit of execution.
Multiple threads in a process can:
	•	Share memory
	•	Talk to each other
	•	Run at the same time (or switch fast enough)

- Multithreading means running multiple threads in parallel (inside the same process)
  to do tasks faster and more efficiently.
  Example - Playing a media player is a process
            1. Playing video
            2. The execution of progress bar
            3. The execution of timer
            4. Playing music
            All of these are the tasks that are running inside a process at the same time in order
            to execute that complete process.
  It is used in animations & games as well and many more places
  - It is the best suitable at programming level
  - Java provides predefined API for multithreading

** Difference between process and thread ? (INTERVIEW)
* PROCESS
- an independent program that is executing on our machine
- it is heavy-weight
- it involves context switching where the CPU switches between executing processes superfast which
  creates an illusion to the user as if multiple processes are running at the same time
- Process takes more time for context switching
- Takes more time for intercommunication
- Each process has its own memory, own CPU time
- Independent in nature
- does not require synchronization
- resource consumption is more
- takes more time for creation
- takes more time for termination

* THREAD
- it is a lightweight task inside a process (smallest unit of execution)
- Thread takes less time for context switching
- Takes less time for intercommunication
- Thread shares memory
- Dependent in nature
- may require synchronization
- resource consumption is less
- takes less time for creation
- takes less time for termination
